# import libraries and modules
import tkinter as tk
from tkinter import messagebox
from pymongo.errors import ConnectionFailure
from ollama import chat
from tkinter import scrolledtext
import settings
import os
from pymongo import MongoClient
from dotenv import load_dotenv
import threading
from elevenlabs import play
from elevenlabs.client import ElevenLabs


load_dotenv()
mongo_uri = os.getenv("MONGO_URI")
client = MongoClient(mongo_uri)
db = client["AIChat"]
# collection for name
name_collection = db['users_name'] 
# empty list to store the AI output:


# load eleven labs api key 
client_labs = ElevenLabs(
    api_key=os.getenv("ELEVENLABS_API_KEY")
)

# ---------------------------------------------------
def window_of_dashboard(parent_window):
    # create window c
    window = tk.Toplevel()
    # size of window
    window.geometry('1000x550')
    # background color
    window.configure(bg="#F5EFFF")
    # title of window
    window.title('Chat Interface')
    window.protocol("WM_DELETE_WINDOW", lambda: on_dashboard_window(parent_window))
    # fetch user's name from database
    user_name_data = name_collection.find_one()
    if user_name_data and "name" in user_name_data:
        user_name = user_name_data["name"]
    else:
        user_name = "User"
    # -----------------------------------------------------
    def on_dashboard_window(parent_window):
        window.destroy()
        parent_window.deiconify()
    #------------------------------------------------------

    # button to clear AI response or chat
    def clear():
        chat_display.config(state=tk.NORMAL)
        chat_display.delete('1.0', tk.END)
        chat_display.config(state=tk.DISABLED)
    # -----------------------------------------------------

    # button to clear user's input text
    def clear_input():
        user_entry.delete('1.0', tk.END)
    # -------------------------------------------------------

    # logout button
    def logout():
        window.destroy()
        parent_window.deiconify()
    # ---------------------------------------------------------

    # send button logic (AI model logic)
    def send_to_ollama():
        # get user prompt from the input field
        user_input = user_entry.get("1.0", tk.END).strip()
        # condition if user clicks send button without entering any prompt
        if user_input == '':
            messagebox.showerror('error','no prompt found!')
        else:
            # updating chat display for AI response
            chat_display.config(state='normal')
            chat_display.insert(tk.END, f"You: {user_input}\n")
            chat_display.insert(tk.END, "bot: ")
            chat_display.config(state='disabled')
            chat_display.see(tk.END)
            user_entry.delete("1.0", tk.END)

            # main logic for AI streaming (connect to ollama)
            def stream_response():
                try:
                    # initiallize the list with empty string

                    stream = chat(
                        model='gemma3:1b', # model name
                        messages = [{'role':'user','content':user_input}], 
                        stream=True # stream is set to True
                    )
                    for chunk in stream:
                        content = chunk['message']['content']
                        window.after(0, append_response, content)

                    window.after(0, append_response, "\n")
                    return content

                except Exception as e:
                    window.after(0, append_response, f"\n[Error: {str(e)}]\n")
                    window.after(0, lambda: messagebox.showerror('AI error',f'failed to get AI response : {e}'))
            # --------------------------------------------------------------------------------------------------------

            # start threading to run AI's response text by text
            threading.Thread(target=stream_response, daemon=True).start() 

            # append response after each text generated by the AI
            def append_response(text):
                chat_display.config(state='normal')
                chat_display.insert(tk.END, text)
                chat_display.config(state='disabled')
                chat_display.see(tk.END)
    # --------------------------------------------------------------------------------------------------------

    

    # function for TTS
    def speak():
        text_for_TTS = latest_ai_response_container[0]
        if not text.strip():
            messagebox.showerror('Error','No AI response available to speak')
        else:
            try:
                audio = client_labs.text_to_speech.convert(
                    text = text,
                    voice_id='JBFqnCBsd6RMkjVDRZzb',
                    model_id= 'eleven_multilingual_v2',
                    output_format= 'mp3_44100_128'
                )

                play(audio)
            except Exception as e:
                messagebox.showerror('TTS Error', str(e))

    # -----------------------------------------------------------------------------------------------------------------------
    # widgets for dashboard
    # heading
    tk.Label(window, text=f"{user_name},How I can help you today?", bg='#F5EFFF',font=('comic sans ms',14,'italic')).grid(row=0, column=0,padx=10, pady=10, columnspan=3)

    window.grid_columnconfigure(0, weight=1)
    window.grid_columnconfigure(1, weight=1)
    window.grid_columnconfigure(2, weight=1)

    # AI respone entry
    chat_display = scrolledtext.ScrolledText(window, wrap=tk.WORD, font=("Arial", 12),height = 16,width = 50,bg='#F2F9FF')
    chat_display.grid(row=1, column=1, pady=10, columnspan=1)

    # user input field
    user_entry = scrolledtext.ScrolledText(window, wrap=tk.WORD, font=('Arial',10,), height = 3, width = 50, bg='#F2F9FF')
    user_entry.grid(row=2, column=1, pady=20)

    # send button
    send_btn = tk.Button(window, text='Send',command=send_to_ollama, font=('Arial',10,'bold'), bg='#A0E9FF', width=15)
    send_btn.grid(row=2, column=2, padx=10, pady=10)
    # allow user to hit enter to send the prompt
    window.bind('<Return>', lambda event=None: send_btn.invoke())

    # clear AI response 
    clear_btn = tk.Button(window, text='clear chat', width=15, command=clear, font=('Arial',10,'bold'), bg='#FCFFC1')
    clear_btn.grid(row=2, column=0)

    # logout button
    logout_btn = tk.Button(window, text='Logout', command=logout, bg='#F7374F', fg='white', font=('Arial',10,'bold'), width=15)
    logout_btn.grid(row=0, column=2)

    # settings button
    settings_btn = tk.Button(window, text='Settings', command=settings.open_settings_window, bg='#B7B1F2', font=("arial",10,'bold'), width=15)
    settings_btn.grid(row=0, column=0)

    # clear user's prompt
    clear_user_input = tk.Button(window, text='clear prompt', command=clear_input, font=('Arial',10,'bold'), bg='#FCFFC1', width=15)
    clear_user_input.grid(row=3, column=1)

    # TTS button
    #speack_btn = tk.Button(window, text='Speak', command=speak, font=('Arial',10,'bold'), width=15, bg='#2F58CD', fg='white')
    #speack_btn.grid(row=3, column=2)